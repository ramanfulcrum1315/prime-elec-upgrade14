<?php
/**
 * Magento Enterprise Edition
 *
 * NOTICE OF LICENSE
 *
 * This source file is subject to the Magento Enterprise Edition License
 * that is bundled with this package in the file LICENSE_EE.txt.
 * It is also available through the world-wide-web at this URL:
 * http://www.magentocommerce.com/license/enterprise-edition
 * If you did not receive a copy of the license and are unable to
 * obtain it through the world-wide-web, please send an email
 * to license@magentocommerce.com so we can send you a copy immediately.
 *
 * DISCLAIMER
 *
 * Do not edit or add to this file if you wish to upgrade Magento to newer
 * versions in the future. If you wish to customize Magento for your
 * needs please refer to http://www.magentocommerce.com for more information.
 *
 * @category    design
 * @package     default_default
 * @copyright   Copyright (c) 2010 Magento Inc. (http://www.magentocommerce.com)
 * @license     http://www.magentocommerce.com/license/enterprise-edition
 */
?>

<?php
/**
 * @see Enterprise_Checkout_Block_Adminhtml_Manage
 */
?>

<script type="text/javascript">
var AdminCheckout = new Class.create();
AdminCheckout.prototype = {

    initialize: function(){
        this.checkboxes =  $H({});
    },

    onAjaxSuccess: function(transport)
    {
        if (transport.responseText.isJSON()) {
            var response = transport.responseText.evalJSON()
            if (response.error) {
                throw response;
            } else if (response.url) {
                setLocation(response.url);
             }
        }
    },

    getContext: function(elementName)
    {
        return (this.checkboxes.get(elementName) || this.checkboxes.set(elementName, $H({})));
    },

    resetSource: function()
    {
        this.checkboxes =  $H({});
        $('products_search_accordion').select('input.checkbox').each(function(e) {
            if (e.checked) {
                e.checked = false;
                this.setCheckboxChecked(e, false);
            }
        }.bind(this));
    },

    reloadItems: function(container)
    {
        new Ajax.Request('<?php echo $this->getActionUrl('cart') ?>',
            {
                onSuccess: function(transport) {
                    try {
                        this.onAjaxSuccess(transport);
                        $('checkout_items').update(transport.responseText);
                    } catch (e) {
                        var message = e.error ? e.error : e.message;
                        alert(message);
                    }
                }.bind(this)
            });
    },

    searchProducts: function()
    {
        productsGrid.reloadParams = {source: this.checkboxes.toJSON()};
        productsGrid.doFilter();
    },

    addToCart: function()
    {
        new Ajax.Request('<?php echo $this->getActionUrl('addToCart') ?>', {
            parameters: {source: this.checkboxes.toJSON()},
            onSuccess: function(transport) {
                try {
                    this.onAjaxSuccess(transport);
                    this.reloadItems();
                    if ($('cc_info') != undefined) {
                        this.reloadCoupon();
                    }
                    if (this.getContext('source_wishlist').keys().size() > 0) {
                        wishlistItemsGrid.reload();
                    }
                    this.resetSource();
                } catch (e) {
                    var message = e.error ? e.error : e.message;
                    alert(message);
                }
            }.bind(this)
        });
    },

    updateItems: function()
    {
        var params = this.serializeData('checkout_items');
        new Ajax.Request('<?php echo $this->getActionUrl('updateItems') ?>', {
            parameters: params,
            onSuccess: function(transport) {
                try {
                    this.onAjaxSuccess(transport);
                    this.reloadItems();
                    if ($('cc_info') != undefined) {
                        this.reloadCoupon();
                    }
                    if (params.values().indexOf('wishlist') != -1) {
                        wishlistItemsGrid.reload();
                    }
                } catch (e) {
                    var message = e.error ? e.error : e.message;ma
                    alert(message);
                }
            }.bind(this)
        });
    },

    applyCoupon: function(ccode)
    {
        if (ccode == undefined || !ccode.blank()) {
            ccode = ccode == undefined ? '' : ccode;
            new Ajax.Request('<?php echo $this->getActionUrl('applyCoupon') ?>',
                {
                    parameters: {code: ccode},
                    onSuccess: function(transport) {
                        try {
                            this.onAjaxSuccess(transport);
                            this.reloadItems();
                            $('coupon_container').update(transport.responseText);
                        } catch (e) {
                            var message = e.error ? e.error : e.message;
                            alert(message);
                        }
                    }.bind(this)
                });
       }
    },

    reloadCoupon: function()
    {
        new Ajax.Request('<?php echo $this->getActionUrl('coupon') ?>',
            {
                onSuccess: function(transport) {
                    try {
                        this.onAjaxSuccess(transport);
                        $('coupon_container').update(transport.responseText);
                    } catch (e) {
                        var message = e.error ? e.error : e.message;
                        alert(message);
                    }
                }.bind(this)
            });
    },

    gridRowClick: function(grid, event)
    {
        var trElement = Event.findElement(event, 'tr');
        var isInput = Event.element(event).tagName.toLowerCase() == 'input';
        if (trElement) {
            var checkbox = Element.select(trElement, 'input');
            if (checkbox[0]) {
                var checked = isInput ? checkbox[0].checked : !checkbox[0].checked;
                grid.setCheckboxChecked(checkbox[0], checked);
            }
        }
    },

    gridCheckboxCheck: function(grid, element, checked)
    {
        this.setCheckboxChecked(element, checked);
    },

    setCheckboxChecked: function(element, checked)
    {
        if (checked) {
            var qty = 1;
            if(element.qty) {
                element.qty.disabled = false;
                if (!element.qty.value) {
                    element.qty.value = 1;
                }
                qty = element.qty.value;
                this.getContext(element.name).set(element.value, qty);
            }
        } else {
            if(element.qty){
                element.qty.disabled = true;
            }
            this.getContext(element.name).unset(element.value);
        }
    },

    gridRowInit: function(grid, row)
    {
        var checkbox = $(row).down('input[type="checkbox"]');
        if(!checkbox) {
            return;
        }
        var context = this.getContext(checkbox.name);
        var found = false;
        if (context && context.get(checkbox.value)) {
            checkbox.checked = true;
            found = true;
        }
        var qty = $(row).down('.input-text');
        if(!qty) {
            return;
        }
        checkbox.qty = qty;
        qty.checkboxElement = checkbox;
        qty.disabled = true;
        if (found) {
            qty.disabled = false;
            qty.value = context.get(checkbox.value);
        }
        Event.observe(qty,'keyup', this.qtyChanged.bind(this));
        Event.observe(qty,'change',this.qtyChanged.bind(this));
    },

    qtyChanged : function(event){
        var element = Event.element(event);
        if (element && element.checkboxElement && element.checkboxElement.checked){
            this.getContext(element.checkboxElement.name).set(element.checkboxElement.value, element.value);
        }
    },

    serializeData: function(container)
    {
        var fields = $(container).select('input', 'select');
        var data = Form.serializeElements(fields, true);
        return $H(data);
    }
}
</script>
