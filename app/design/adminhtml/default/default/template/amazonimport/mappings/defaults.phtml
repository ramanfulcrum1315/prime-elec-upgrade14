<div class="entry-edit">
    <div class="fieldset " id="group_fields4">
	Please note that the selection of attributes provided below are only those which can be mapped to any value. 
	A large amount of the possible values Amazon asks for about your items have specific options which should be completed under 'Manual Setup' should Quick Setup fail to find your product.<br/><br/>
	While often optional, remember that the more you can tell Amazon about your product, the more likely that customers will discover your product while browsing.
	</div>
</div>
<script type="text/javascript">
// Tooltip Object
var Tooltip = Class.create();
Tooltip.prototype = {
    initialize: function(el, options) {
        this.el = $(el);
        this.initialized = false;
        this.setOptions(options);
        
        // Event handlers
        this.showEvent = this.show.bindAsEventListener(this);
        this.hideEvent = this.hide.bindAsEventListener(this);
        this.updateEvent = this.update.bindAsEventListener(this);
        Event.observe(this.el, "mouseover", this.showEvent );
        Event.observe(this.el, "mouseout", this.hideEvent );
        
        // Removing title from DOM element to avoid showing it
        this.content = this.el.title;
        this.el.title = "";

        // If descendant elements has 'alt' attribute defined, clear it
        this.el.descendants().each(function(el){
            if(Element.readAttribute(el, 'alt'))
                el.alt = "";
        });
    },
    setOptions: function(options) {
        this.options = {
            backgroundColor: '#F9F9F9', // Default background color
            borderColor: '#666', // Default border color
            textColor: '', // Default text color (use CSS value)
            textShadowColor: '', // Default text shadow color (use CSS value)
            maxWidth: 350,  // Default tooltip width
            align: "left", // Default align
            delay: 250, // Default delay before tooltip appears in ms
            mouseFollow: true, // Tooltips follows the mouse moving
            opacity: .75, // Default tooltips opacity
            appearDuration: .25, // Default appear duration in sec
            hideDuration: .25 // Default disappear duration in sec
        };
        Object.extend(this.options, options || {});
    },
    show: function(e) {
        this.xCord = Event.pointerX(e);
        this.yCord = Event.pointerY(e);
        if(!this.initialized)
            this.timeout = window.setTimeout(this.appear.bind(this), this.options.delay);
    },
    hide: function(e) {
        if(this.initialized) {
            this.appearingFX.cancel();
            if(this.options.mouseFollow)
                Event.stopObserving(this.el, "mousemove", this.updateEvent);
            new Effect.Fade(this.tooltip, {duration: this.options.hideDuration, afterFinish: function() { Element.remove(this.tooltip) }.bind(this) });
        }
        this._clearTimeout(this.timeout);
        
        this.initialized = false;
    },
    update: function(e){
        this.xCord = Event.pointerX(e);
        this.yCord = Event.pointerY(e);
        this.setup();
    },
    appear: function() {
        // Building tooltip container
        this.tooltip = Builder.node("div", {className: "tooltip", style: "display: none;" }, [
            Builder.node("div", {className:"xtop"}, [
                Builder.node("div", {className:"xb1", style:"background-color:" + this.options.borderColor + ";"}),
                Builder.node("div", {className:"xb2", style: "background-color:" + this.options.backgroundColor + "; border-color:" + this.options.borderColor + ";"}),
                Builder.node("div", {className:"xb3", style: "background-color:" + this.options.backgroundColor + "; border-color:" + this.options.borderColor + ";"}),
                Builder.node("div", {className:"xb4", style: "background-color:" + this.options.backgroundColor + "; border-color:" + this.options.borderColor + ";"})
            ]),
            Builder.node("div", {className: "xboxcontent", innerHTML: unescape(this.content), style: "background-color:" + this.options.backgroundColor + 
                "; border-color:" + this.options.borderColor + 
                ((this.options.textColor != '') ? "; color:" + this.options.textColor : "") + 
                ((this.options.textShadowColor != '') ? "; text-shadow:2px 2px 0" + this.options.textShadowColor + ";" : "")}, this.content), 
            Builder.node("div", {className:"xbottom"}, [
                Builder.node("div", {className:"xb4", style: "background-color:" + this.options.backgroundColor + "; border-color:" + this.options.borderColor + ";"}),
                Builder.node("div", {className:"xb3", style: "background-color:" + this.options.backgroundColor + "; border-color:" + this.options.borderColor + ";"}),
                Builder.node("div", {className:"xb2", style: "background-color:" + this.options.backgroundColor + "; border-color:" + this.options.borderColor + ";"}),
                Builder.node("div", {className:"xb1", style:"background-color:" + this.options.borderColor + ";"})
            ]),
        ]);
        document.body.insertBefore(this.tooltip, document.body.childNodes[0]);
        
        Element.extend(this.tooltip); // IE needs element to be manually extended

		$$('.xboxcontent').each( function(element){
			element.innerHTML = unescape(element.innerHTML);
		});
	
		this.options.width = this.tooltip.getWidth();
        this.tooltip.style.width = this.options.width + 'px'; // IE7 needs width to be defined

        this.setup();
        
        if(this.options.mouseFollow)
            Event.observe(this.el, "mousemove", this.updateEvent);
            
        this.initialized = true;
        this.appearingFX = new Effect.Appear(this.tooltip, {duration: this.options.appearDuration, to: this.options.opacity });
    },
    setup: function(){
        // If content width is more then allowed max width, set width to max
        if(this.options.width > this.options.maxWidth) {
            this.options.width = this.options.maxWidth;
            this.tooltip.style.width = this.options.width + 'px';
        }
            
        // Tooltip doesn't fit the current document dimensions
        if(this.xCord + this.options.width >= Element.getWidth(document.body)) {
            this.options.align = "right";
            this.xCord = this.xCord - this.options.width + 20;
        }
        
        this.tooltip.style.left = this.xCord - 7 + "px";
        this.tooltip.style.top = this.yCord + 12 + "px";
    },
    _clearTimeout: function(timer) {
        clearTimeout(timer);
        clearInterval(timer);
        return null;
    }
};
    document.observe("dom:loaded", function() {
  	$$(".amzhelp").each( function(link) {
			new Tooltip(link, {mouseFollow: true, opacity: 100, background: "#F9F9F9", borderColor: "#F77C16"});
		});
	});

</script>
<style type="text/css">

.tooltip {
    position: absolute!important;
    overflow:hidden;
    font-size: 12px;
	width:300px;
	z-index: 10000!important;
}
    .tooltip .xtop, .tooltip .xbottom { display: block; background: transparent; font-size: 1px; }
    .tooltip .xb1, .tooltip .xb2, .tooltip .xb3, .tooltip .xb4 { display: block; overflow: hidden; }
    .tooltip .xb1, .tooltip .xb2, .tooltip .xb3 { height: 1px; }
    .tooltip .xb2, .tooltip .xb3, .tooltip .xb4 { background: #666; border-left: 1px solid #333; border-right: 1px solid #333; }
    .tooltip .xbottom .xb2, .tooltip .xbottom .xb3, .tooltip .xbottom .xb4 { background: #666; }
    .tooltip .xb1 { margin: 0 5px; background: #00; }
    .tooltip .xb2 { margin: 0 3px; border-width: 0 1px; }
    .tooltip .xb3 { margin: 0 2px; }
    .tooltip .xb4 { height: 2px; margin: 0 1px; }

    .tooltip .xboxcontent {
        padding: 0 .5em;
        margin: 0;
        color: #000000;
        text-align: left;
        word-wrap:break-word;
        border: 1px solid #333;
        border-width: 0px 1px 0 1px;
        background-color: #F9F9F9;
    }
</style>
<?php 

	if($this->getData('producttype') == "Product"){
		
		?>
		
<form action="<?php echo Mage::getModel('amazonimport/amazonimport')->getRootUrl(); ?>amazonimport/mapping/savemapping/cachebuster/<?php echo time(); ?>" method="POST" id="saveform" name="saveform" target="saveformuploader">
	<input type="hidden" name="form_key" id="form_key" value="<?php echo Mage::getSingleton('core/session')->getFormKey() ?>" /> 
	<input type="hidden" name="saveform-xmlkey" id="saveform-xmlkey" value="0" />
	<input type="hidden" name="saveform-keyvalue" id="saveform-keyvalue" value="0" />
	<input type="hidden" name="saveform-attrvalue" id="saveform-attrvalue" value="0" />
	<input type="hidden" name="saveform-attrkey" id="saveform-attrkey" value="0" />
	<input type="hidden" name="saveform-repelemindex" id="saveform-repelemindex" value="-1" />
</form>	

<form action="<?php echo Mage::getModel('amazonimport/amazonimport')->getRootUrl(); ?>amazonimport/mapping/getattributes/cachebuster/<?php echo time(); ?>" method="POST" id="getattributes" name="getattributes" target="saveformuploader">
	<input type="hidden" name="form_key" id="form_key" value="<?php echo Mage::getSingleton('core/session')->getFormKey() ?>" /> 
	<input type="hidden" name="getattributes-xmlkey" id="getattributes-xmlkey" value="0" />
	<input type="hidden" name="getattributes-keyvalue" id="getattributes-keyvalue" value="0" />
	<input type="hidden" name="getattributes-repelemindex" id="getattributes-repelemindex" value="-1" />
</form>

<form action="<?php echo Mage::getModel('amazonimport/amazonimport')->getRootUrl(); ?>amazonimport/mapping/canceledit/cachebuster/<?php echo time(); ?>" method="POST" id="canceledit" name="canceledit" target="saveformuploader">
	<input type="hidden" name="form_key" id="form_key" value="<?php echo Mage::getSingleton('core/session')->getFormKey() ?>" /> 
	<input type="hidden" name="canceledit-xmlkey" id="canceledit-xmlkey" value="0" />
	<input type="hidden" name="canceledit-keyvalue" id="canceledit-keyvalue" value="0" />
	<input type="hidden" name="canceledit-repelemindex" id="canceledit-repelemindex" value="-1" />
</form>

<form action="<?php echo Mage::getModel('amazonimport/amazonimport')->getRootUrl(); ?>amazonimport/mapping/textedit/cachebuster/<?php echo time(); ?>" method="POST" id="textedit" name="textedit" target="saveformuploader">
	<input type="hidden" name="form_key" id="form_key" value="<?php echo Mage::getSingleton('core/session')->getFormKey() ?>" /> 
	<input type="hidden" name="textedit-xmlkey" id="textedit-xmlkey" value="0" />
	<input type="hidden" name="textedit-keyvalue" id="textedit-keyvalue" value="0" />
	<input type="hidden" name="textedit-repelemindex" id="textedit-repelemindex" value="-1" />
</form>


<iframe src="about:blank" id="saveformuploader" name="saveformuploader" style="width: 1px; height: 1px;" frameborder="0"></iframe>
		
		
		<?php 
			
	}

?>


<div class="entry-edit">
    <div class="entry-edit-head">
    	<h4 class="icon-head head-edit-form fieldset-legend">Mappable Attributes for <?php echo ucwords($this->from_camel_case("".$this->getData('producttype')."")) ?></h4>
    </div>
    
    <div class="fieldset " id="group_fields4">
    <div class="hor-scroll">
	        
	        <?php echo $this->outputChildren($this->getData('producttype'),$this->getData('nodedata')); ?>
	        
     </div>
   </div>
 </div>
  	
			